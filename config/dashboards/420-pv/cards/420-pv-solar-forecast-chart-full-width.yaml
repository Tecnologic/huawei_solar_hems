type: custom:apexcharts-card
config_templates: pv_solar_forecast_chart
now:
  show: true
apex_config:
  chart:
    height: 270px
  stroke:
    dashArray:
      - 0
      - 0
      - 4
      - 0
      - 4
graph_span: 6d
series:
  # HUAWEI Solar Integration
  - entity: sensor.battery_state_of_capacity
    name: Bat-SoC
    float_precision: 0
    type: line
    color: "#f06292"
    opacity: 0.8
    stroke_width: 0.8
    yaxis_id: capacity
    unit: "%"
    show:
      in_header: false
    group_by:
      func: avg
      duration: 5m
  # EMHASS Forecast
  - entity: sensor.soc_batt_forecast
    name: Bat-SoC FCST
    show:
      legend_value: false
      in_header: false
    type: line
    color: "#f06292"
    opacity: 0.8
    stroke_width: 0.8
    yaxis_id: capacity
    unit: "%"
    data_generator: |
      return entity.attributes.batteries_scheduled_soc.map((entry) => {
        return [new Date(entry.date).getTime(), entry.soc_batt_forecast];
      });
  # Template Sensor
  - entity: sensor.house_consumption_power
    name: House
    type: line
    color: MediumAquaMarine
    opacity: 1
    stroke_width: 0.8
    transform: return x/1000;
    show:
      in_header: false
    group_by:
      func: avg
      duration: 5m
  # EMHASS Forecast
  - entity: sensor.p_load_forecast
    name: House FCST
    show:
      legend_value: false
      in_header: false
    type: line
    color: MediumAquaMarine
    opacity: 1.0
    stroke_width: 0.8
    data_generator: |
      return entity.attributes.forecasts.map((entry) => {
        return [new Date(entry.date).getTime(), entry.p_load_forecast/1000];
      });
  # HUAWEI Solar Integration
  - entity: sensor.power_meter_active_power
    name: Grid
    color: "#488fc2"
    opacity: 0.3
    transform: return x/1000;
    show:
      in_header: false
    group_by:
      func: avg
      duration: 5m
  # EMHASS Forecast
  - entity: sensor.p_grid_forecast
    name: Grid FCST
    color: "#488fc2"
    opacity: 0.2
    show:
      legend_value: false
      in_header: false
    data_generator: |
      return entity.attributes.forecasts.map((entry) => {
        return [new Date(entry.date).getTime(), entry.p_grid_forecast/1000*-1];
      });
  # HUAWEI Solar Integration
  - entity: sensor.inverter_input_power
    name: Solar
    color: "#ff9800"
    opacity: 0.4
    transform: return x/1000;
    show:
      in_header: false
    group_by:
      func: avg
      duration: 5m
  # Solcast PV Forecast Integration
  - entity: sensor.solcast_pv_forecast_prognose_heute
    name: Solar FCST (D1)
    show:
      legend_value: false
      in_header: false
    data_generator: |
      return entity.attributes.detailedForecast.map((entry) => {
        return [new Date(entry.period_start), entry.pv_estimate];
      });
  # Solcast PV Forecast Integration
  - entity: sensor.solcast_pv_forecast_prognose_morgen
    name: Solar FCST (D2)
    show:
      legend_value: false
      in_header: false
    data_generator: |
      return entity.attributes.detailedForecast.map((entry) => {
        return [new Date(entry.period_start), entry.pv_estimate];
      });
  # Solcast PV Forecast Integration
  - entity: sensor.solcast_pv_forecast_prognose_tag_3
    name: Solar FCST (D3)
    show:
      legend_value: false
      in_header: false
    data_generator: |
      return entity.attributes.detailedForecast.map((entry) => {
        return [new Date(entry.period_start), entry.pv_estimate];
      });
  # Solcast PV Forecast Integration
  - entity: sensor.solcast_pv_forecast_prognose_tag_4
    name: Solar FCST (D4)
    show:
      legend_value: false
      in_header: false
    data_generator: |
      return entity.attributes.detailedForecast.map((entry) => {
        return [new Date(entry.period_start), entry.pv_estimate];
      });
  # Solcast PV Forecast Integration
  - entity: sensor.solcast_pv_forecast_prognose_tag_5
    name: Solar FCST (D5)
    show:
      legend_value: false
      in_header: false
    data_generator: |
      return entity.attributes.detailedForecast.map((entry) => {
        return [new Date(entry.period_start), entry.pv_estimate];
      });
  # Solcast PV Forecast Integration
  - entity: sensor.solcast_pv_forecast_prognose_heute
    yaxis_id: header_only
    name: Solar FCST (D1)
    unit: kWh
    show:
      in_chart: false
  # Template Sensor
  - entity: sensor.solcast_forecast_remaining_today_every_minute
    yaxis_id: header_only
    name: Solar FCST (D1 Remaining)
    unit: kWh
    show:
      in_chart: false
  # Solcast PV Forecast Integration
  - entity: sensor.solcast_pv_forecast_prognose_morgen
    yaxis_id: header_only
    name: Solar FCST (D2)
    unit: kWh
    show:
      in_chart: false
  # Solcast PV Forecast Integration
  - entity: sensor.solcast_pv_forecast_prognose_tag_3
    yaxis_id: header_only
    name: Solar FCST (D3)
    unit: kWh
    show:
      in_chart: false
  # Solcast PV Forecast Integration
  - entity: sensor.solcast_pv_forecast_prognose_tag_4
    yaxis_id: header_only
    name: Solar FCST (D4)
    unit: kWh
    show:
      in_chart: false
  # Solcast PV Forecast Integration
  - entity: sensor.solcast_pv_forecast_prognose_tag_5
    yaxis_id: header_only
    name: Solar FCST (D5)
    unit: kWh
    show:
      in_chart: false
  # Solcast PV Forecast Integration
  - entity: sensor.solcast_pv_forecast_zeitpunkt_letzter_api_abruf
    yaxis_id: header_only
    name: Solar FCST (Last Update)
    float_precision: 0
    unit: " min."
    transform: >-
      return ((Date.now()) - (new Date(x).getTime())) / 60 / 60 / 24
    show:
      in_chart: false
card_mod:
  class: solar-forecast-chart-full-width
