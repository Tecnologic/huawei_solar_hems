# ########## SolCast PV Forecast Integration ##########
#
# homeassistant:
#   min_version: 2024.10.1
# domain: template sensor
#
# source_url: https://github.com/heinemannj/huawei_solar_hems/blob/main/config/packages/solcast-solar.yaml
#
# repository_name: Huawei Solar HEMS
# repository_description: Home Assistent (HA) Home Energy Management System (HEMS)
# repository_url: https://github.com/heinemannj/huawei_solar_hems
# documentation_url: https://github.com/heinemannj/huawei_solar_hems/wiki
# author: https://github.com/heinemannj
#
# Copyright (c) 2024 Joerg Heinemann
# All rights reserved.
#
# license: https://github.com/heinemannj/huawei_solar_hems/blob/main/LICENSE
#
# ########## Entities ##########
#
# - automation.solcast_pv_forecast_api_update
#
# - sensor.solcast_pv_forecast_api_update
#
# ########## Start: Automation ##########
#
automation solcast:
  - id: 'solcast_pv_forecast_api_update'
    alias: 'SolCast PV Forecast - API Update'
    description: 'Update the SolCast PV Forecast data during sunrise and sunset.'
    variables:
      next_poll_time: "{{ states('sensor.solcast_pv_forecast_api_update') }}"
    triggers:
    - trigger: time_pattern
      minutes: /3
    conditions:
    - condition: template
      value_template: "{{ now() >= next_poll_time|as_datetime|as_local }}"
    actions:
    - delay:
        seconds: '{{ range(7, 67)|random|int }}'
    - data: {}
      action: solcast_solar.update_forecasts
    mode: single
#
# ########## End: Automation ##########
#
# ########## Start: Persistent Template Sensors ##########
#
template:
  - trigger:
      - platform: time_pattern
        minutes: "/1"
    action:
      - variables:
          t: "{{ now().isoformat() }}"
          var: >-
            {% from '032-emhass.jinja' import globalVariables %}
            {{ globalVariables()|from_json }}
          sunrise: "{{ state_attr(var.sun_rising_time,'today')|as_datetime|as_local }}"
          sunrise_tomorrow: "{{ state_attr(var.sun_rising_time,'tomorrow')|as_datetime|as_local }}"
          sunset: "{{ state_attr(var.sun_setting_time,'today')|as_datetime|as_local }}"
          last_poll_time: "{{ states(var.solcast_last_poll_time)|as_datetime|as_local }}"
          api_request_limit: "{{ states(var.solcast_api_request_limit)|int(0) }}"
          api_request_used: "{{ states(var.solcast_api_request_used)|int(0) }}"
          api_request_free: "{{ (api_request_limit - api_request_used)|int(0) }}"
          next_poll_time: >-
            {% if last_poll_time < sunrise %}
                {{ sunrise }}
            {% elif api_request_free >= 1 %}
                {% set ts_difference = (sunset|as_timestamp - last_poll_time|as_timestamp)|float(0) %}
                {% set ts_interval = (ts_difference / api_request_free)|float(0) %}
                {{ (last_poll_time|as_timestamp + ts_interval)|as_datetime|as_local }}
            {% else %}
                {{ sunrise_tomorrow }}
            {% endif %}
    sensor:
      - name: solcast_pv_forecast_api_update
        unique_id: solcast_pv_forecast_api_update
        state: "{{ next_poll_time }}"
        attributes:
          last_updated: "{{ t }}"
#
# ########## End: Persistent Template Sensors ##########
#
# ########## Start: Rest commands ##########
#
#rest:
#  - resource: https://api.solcast.com.au/rooftop_sites/***YOUR-Side-ID***/forecasts?format=json&api_key=***Your-API-Key***&hours=120
#    scan_interval: '01:30:00'
#    sensor:
#      - name: "Solcast Forecast Data"
#        unique_id: solcast_pv_estimate
#        force_update: true
#        value_template: "{{ value_json.forecasts[0].pv_estimate|round(1) }}"
#        unit_of_measurement: kW
#        device_class: power
#        state_class: measurement
#        json_attributes:
#        - forecasts
#        icon: mdi:solar-power
#    
#      - name: "Solcast Forecast 10"
#        unique_id: solcast_pv_estimate10
#        force_update: true
#        value_template: "{{ value_json.forecasts[0].pv_estimate10|round(1) }}"
#        unit_of_measurement: kW
#        device_class: power
#        state_class: measurement
#        icon: mdi:solar-power
#        
#      - name: "Solcast Forecast 90"
#        unique_id: solcast_pv_estimate90
#        force_update: true
#        value_template: "{{ value_json.forecasts[0].pv_estimate90|round(1) }}"
#        unit_of_measurement: kW
#        device_class: power
#        state_class: measurement
#        icon: mdi:solar-power
#
# ########## End: Rest commands ##########
