# ########## EMHASS Add-on ##########
#
# homeassistant:
#   min_version: 2024.10.1
# domain: template sensor
#
# source_url: https://github.com/heinemannj/huawei_solar_hems/blob/main/config/packages/emhass.yaml
#
# repository_name: Huawei Solar HEMS
# repository_description: Home Assistent (HA) Home Energy Management System (HEMS)
# repository_url: https://github.com/heinemannj/huawei_solar_hems
# documentation_url: https://github.com/heinemannj/huawei_solar_hems/wiki
# author: https://github.com/heinemannj
#
# Copyright (c) 2024 Joerg Heinemann
# All rights reserved.
#
# license: https://github.com/heinemannj/huawei_solar_hems/blob/main/LICENSE
#
# ########## Entities ##########
#
# - automation.emhass_naive_mpc_optim_forecast
#
# - sensor.emhass_forecast_data
#
# ########## Rest commands ##########
#
# - emhass_publish_data
# - emhass_perfect_optim
# - emhass_dayahead_optim_forecast
# - emhass_naive_mpc_optim_forecast
#
# - emhass_ml_load_forecast_model_fit
# - emhass_ml_load_forecast_model_predict
# - emhass_ml_load_forecast_model_tune
#
# ########## Start: Automation ##########
#
automation emhass:
  #
  # EMHASS - naive mpc optimization - upto 48 hours forecast
  #
  # Start rest command: emhass_naive_mpc_optim_forecast
  #
  - id: "emhass_naive_mpc_optim_forecast"
    alias: "EMHASS - naive mpc optim forecast"
    description: "EMHASS - naive mpc optimization - upto 48 hours forecast."
    triggers:
      - trigger: time_pattern
        minutes: /1
    actions:
      - metadata: {}
        data: {}
        enabled: true
        continue_on_error: false
        response_variable: rest_response
        action: rest_command.emhass_naive_mpc_optim_forecast
      - if:
          - condition: template
            value_template: >-
              {{ rest_response['status'] < 400 }}
        then:
          - data:
              prefix: all
            enabled: true
            continue_on_error: true
            response_variable: rest_response
            action: rest_command.emhass_publish_data
        else:
          - metadata: {}
            data:
              level: warning
              message: "{{ rest_response['content'] }}"
              logger: EMHASS.MINUTE
            action: system_log.write
    mode: single
#
# ########## End: Automation ##########
#
# ########## Start: Template ##########
#
template:
  - trigger:
      - platform: time_pattern
        minutes: "/1"
    action:
      - variables:
          t: "{{ now().isoformat() }}"
          epexspot_net_price: "{{ states('sensor.epex_spot_data_net_price')|float(0) / 100 }}"
          net_price: >-
            {% from 'emhass.jinja' import forecastEPEXSpot %}
            {{ forecastEPEXSpot(state_attr('sensor.epex_spot_data_net_price', 'data'))|from_json }}
          ts_start_time: "{{ (now().replace(second=0).replace(microsecond=0) - timedelta(minutes=(now().minute)))|as_timestamp }}"
          stat: >-
            {% from 'emhass.jinja' import priceStatistics %}
            {{ priceStatistics(net_price, 'start_time', 'price_ct_per_kwh', ts_start_time)|from_json }}
          solcast: >-
            {% from 'emhass.jinja' import convertDate %}
            {%- set today = convertDate(state_attr(var.solcast_forecast_today, 'detailedForecast'), 'period_start')|from_json %}
            {%- set tomorrow = convertDate(state_attr(var.solcast_forecast_tomorrow, 'detailedForecast'), 'period_start')|from_json %}
            {{ today + tomorrow }}
    sensor:
      #
      #
      #
      - name: emhass_forecast_data
        unique_id: emhass_forecast_data
        # friendly_name: "emhass_forecast_data"
        # state_class: "total"
        state_class: measurement
        unit_of_measurement: "EUR/kWh"
        icon: mdi:eye
        state: "{{ epexspot_net_price|round(5) }}"
        attributes:
          data: >-
            {%- set var = namespace(result = []) %}

            {# Construct new array putting everthing together #}
            {%- for record in net_price if record.start_time|as_timestamp >= ts_start_time %}
              {# Split into 30 min interval #}
              {# Solar Forecast is already in in 30 min interval #}

              {# - 1. half hour #}
              {# - if clause is only necessary for the first iteration to deceide starting the var.result array with 0 or 30 min interval #}
              {% if record.start_time|as_timestamp >= (t|as_timestamp - 1800) %}
                {%- set end_time = (record.end_time|as_timestamp - 1800)|timestamp_local %}

                {% from '032-emhass.jinja' import forecastArray %}
                {%- set var.result = forecastArray(var.result, solcast, record.start_time, end_time, record.price_ct_per_kwh)|from_json %}
              {% endif %}

              {# - 2. half hour #}
              {%- set start_time = (record.start_time|as_timestamp + 1800)|timestamp_local %}

              {% from '032-emhass.jinja' import forecastArray %}
              {%- set var.result = forecastArray(var.result, solcast, start_time, record.end_time, record.price_ct_per_kwh)|from_json %}
            {%- endfor %}
            {{ var.result }}
          epexspot_max_price: "{{ stat.max_price|round(5) }}"
          epexspot_min_price: "{{ stat.min_price|round(5) }}"
          epexspot_avg_price: "{{ stat.avg_price|round(5) }}"
          epexspot_price_range: "{{ stat.price_range|round(5) }}"
          last_updated: "{{ t }}"
#
# ########## End: Persistent Template Sensors ##########
#
# ########## Start: Rest commands ##########
#
rest_command:
  emhass_publish_data:
    url: http://localhost:5000/action/publish-data
    method: POST
    content_type: "application/json"
    timeout: 30
    payload: "{}"

  emhass_perfect_optim:
    url: http://localhost:5000/action/perfect-optim
    method: POST
    content_type: "application/json"
    timeout: 30
    payload: "{}"

  emhass_dayahead_optim_forecast:
    url: http://localhost:5000/action/dayahead-optim
    method: POST
    content_type: "application/json"
    timeout: 30
    payload: >-
      {
        "pv_power_forecast": {{
          ([states('sensor.total_solar_power')|float(0)] +
          (state_attr('sensor.emhass_forecast_data', 'data')|map(attribute='p_pv_forecast')|list)[1:48]
          )| tojson
        }},
        "load_cost_forecast": {{
          ([states('sensor.epex_spot_data_net_price')|float(0)|round(2)/100] +
          (state_attr('sensor.emhass_forecast_data', 'data')|map(attribute='epexspot_price_eur_per_kwh')|list)[1:48] 
          )| tojson 
        }},
        "prediction_horizon": 48,
        "soc_init": {{states('sensor.battery_state_of_capacity')|float(0)/100}},
        "soc_final": 1.0,
        "def_total_hours": [0,0],
        "alpha": 1,
        "beta": 0
      }

  emhass_naive_mpc_optim_forecast:
    url: http://localhost:5000/action/naive-mpc-optim
    method: POST
    content_type: "application/json"
    timeout: 30
    payload: >-
      {
        "pv_power_forecast": {{
          ([states('sensor.total_solar_power')|float(0)] +
          (state_attr('sensor.emhass_forecast_data', 'data')|map(attribute='p_pv_forecast')|list)[1:-1]
          )|tojson
        }},
        "load_cost_forecast": {{
          ([states('sensor.epex_spot_data_net_price')|float(0)|round(2)/100] +
          (state_attr('sensor.emhass_forecast_data', 'data')|map(attribute='epexspot_price_eur_per_kwh')|list)[1:-1] 
          )|tojson 
        }},
        "prediction_horizon": 48,
        "soc_init": {{states('sensor.battery_state_of_capacity')|float(0)/100}},
        "soc_final": 1.0,
        "def_total_hours": [0,0],
        "alpha": 1,
        "beta": 0,
        "continual_publish":false
      }

  emhass_ml_load_forecast_model_fit:
    url: http://localhost:5000/action/forecast-model-fit
    method: POST
    content_type: "application/json"
    timeout: 30
    payload: >-
      {
        "days_to_retrieve": 12,
        "model_type":"load_forecast",
        "var_model":"sensor.house_consumption_power",
        "num_lags": 96,
        "split_date_delta": "48h",
        "perform_backtest": true
      }

  emhass_ml_load_forecast_model_predict:
    url: http://localhost:5000/action/forecast-model-predict
    method: POST
    content_type: "application/json"
    timeout: 30
    payload: >-
      {
        "model_predict_publish": true,
        "model_predict_entity_id": "sensor.p_load_forecast",
        "model_predict_unit_of_measurement": "W",
      }

  emhass_ml_load_forecast_model_tune:
    url: http://localhost:5000/action/forecast-model-tune
    method: POST
    content_type: "application/json"
    timeout: 30
    payload: >-
      {
        "var_model":"sensor.house_consumption_power"
      }

#
# ########## End: Rest commands ##########
