# ########## Huawei Solar Integration - Power flow card ##########
#
# homeassistant:
#   min_version: 2024.10.1
# domain: template sensor
#
# source_url: https://github.com/heinemannj/huawei_solar_hems/blob/main/config/packages/huawei-solar-power-flow-card.yaml
#
# repository_name: Huawei Solar HEMS
# repository_description: Home Assistent (HA) Home Energy Management System (HEMS)
# repository_url: https://github.com/heinemannj/huawei_solar_hems
# documentation_url: https://github.com/heinemannj/huawei_solar_hems/wiki
# author: https://github.com/heinemannj
#
# Copyright (c) 2024 Joerg Heinemann
# All rights reserved.
#
# license: https://github.com/heinemannj/huawei_solar_hems/blob/main/LICENSE
#
# ########## Setting for Huawei Solar Integration UPDATE_INTERVAL in const.py ##########
#
# UPDATE_INTERVAL = timedelta(seconds=3)
#
# ########## Entities ##########
#
# - sensor.house_consumption_power
#
# ########## Start: Persistent Template Sensors ##########
#
template:
  # Real house load
  #
  - trigger:
      - platform: state
        entity_id:
          - sensor.inverter_input_power
          - sensor.inverter_active_power
          - sensor.garden_power
        not_from:
          - "unknown"
          - "unavailable"
          - "none"
        not_to:
          - "unknown"
          - "unavailable"
          - "none"
    action:
      - variables:
          t: "{{ now().isoformat() }}"
          inv_in_power: "{{ states('sensor.inverter_input_power')|int(0) }}"
          garden_power: "{{ states('sensor.garden_power')|int(0) }}"
          in_power: "{{ (inv_in_power + garden_power)|int(0) }}"
          inv_active_power: "{{ states('sensor.inverter_active_power')|int(0) }}"
          bat_active_power: "{{ states('sensor.battery_charge_discharge_power')|int(0) }}"
          bat_charge_power: "{{ max(0, bat_active_power) }}"
          bat_discharge_power: "{{ -min(0, bat_active_power) }}"
          bat_charge_from_grid_power: "{{ -min(0, inv_active_power) }}"
          grid_active_power: "{{ states('sensor.power_meter_active_power')|int(0) }}"
          grid_export_power: "{{ max(0, grid_active_power) }}"
          grid_import_power: "{{ -min(0, grid_active_power) }}"
          house_power: "{{ (inv_active_power + garden_power - grid_active_power)|int(0) }}"
          house_power_with_correction: >-
            {% if house_power > 0 %}
              {{ house_power }}
            {% else %}
              {{ 0 }}
            {% endif %}
    sensor:
      #
      #  Sensor for House power
      # - Correction to avoid negative load
      #
      - name: house_consumption_power
        unique_id: house_consumption_power
        #friendly_name: "Haus Verbrauch"
        state_class: measurement
        device_class: power
        unit_of_measurement: "W"
        icon: mdi:home-lightning-bolt
        state: "{{ house_power_with_correction }}"

  # ########## Entities ##########
  #
  # - sensor.inverter_pv_1_power
  # - sensor.inverter_pv_2_power
  # - sensor.inverter_pv_power
  #
  #
  - trigger:
      - platform: state
        entity_id:
          - sensor.inverter_pv_1_voltage
          - sensor.inverter_pv_2_voltage
          - sensor.inverter_pv_1_current
          - sensor.inverter_pv_2_current
        not_from:
          - "unknown"
          - "unavailable"
          - "none"
        not_to:
          - "unknown"
          - "unavailable"
          - "none"
    action:
      - variables:
          t: "{{ now().isoformat() }}"
          pv_1_current: "{{ states('sensor.inverter_pv_1_current')|float(0) }}"
          pv_1_voltage: "{{ states('sensor.inverter_pv_1_voltage')|float(0) }}"
          pv_1_power: "{{ (pv_1_current * pv_1_voltage)|int(0) }}"
          pv_2_current: "{{ states('sensor.inverter_pv_2_current')|float(0) }}"
          pv_2_voltage: "{{ states('sensor.inverter_pv_2_voltage')|float(0) }}"
          pv_2_power: "{{ (pv_2_current * pv_2_voltage)|int(0) }}"
          pv_power: "{{ (pv_1_power + pv_2_power)|int(0) }}"
          garden_power: "{{ states('sensor.garden_power')|int(0) }}"
          solar_power: "{{ (pv_power + garden_power)|int(0) }}"
    sensor:
      - name: inverter_pv_1_power
        unique_id: inverter_pv_1_power
        #friendly_name: 'Inverter PV 1 Power'
        state_class: "measurement"
        device_class: power
        unit_of_measurement: "W"
        icon: mdi:solar-power
        state: "{{ pv_1_power }}"

      - name: inverter_pv_2_power
        unique_id: inverter_pv_2_power
        #friendly_name: "Inverter PV 2 Power"
        state_class: "measurement"
        device_class: power
        unit_of_measurement: "W"
        icon: mdi:solar-power
        state: "{{ pv_2_power }}"

      - name: inverter_pv_power
        unique_id: inverter_pv_power
        #friendly_name: "Inverter PV Sum Power"
        state_class: "measurement"
        device_class: power
        unit_of_measurement: "W"
        icon: mdi:solar-power
        state: "{{ pv_power }}"

      - name: total_solar_power
        unique_id: total_solar_power
        #friendly_name: "Solar Leistung"
        state_class: measurement
        device_class: power
        unit_of_measurement: "W"
        icon: mdi:home-lightning-bolt
        state: "{{ solar_power }}"
