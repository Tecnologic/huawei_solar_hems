# ########## EPEX Spot Integration ##########
#
# homeassistant:
#   min_version: 2024.10.1
# domain: template sensor
#
# source_url: https://github.com/heinemannj/huawei_solar_hems/blob/main/config/packages/epexspot.yaml
#
# repository_name: Huawei Solar HEMS
# repository_description: Home Assistent (HA) Home Energy Management System (HEMS)
# repository_url: https://github.com/heinemannj/huawei_solar_hems
# documentation_url: https://github.com/heinemannj/huawei_solar_hems/wiki
# author: https://github.com/heinemannj
#
# Copyright (c) 2024 Joerg Heinemann
# All rights reserved.
#
# license: https://github.com/heinemannj/huawei_solar_hems/blob/main/LICENSE
#
# ########## Entities ##########
#
# - automation.epex_spot_fetch_data
#
# - binary_sensor.epex_spot_data_update
#
# - sensor.epex_spot_data_price
# - sensor.epex_spot_data_net_price
# - sensor.epex_spot_data_quantile
#
# ########## Start: Automation ##########
#
automation epexspot:
  - id: "epex_spot_fetch_data"
    alias: "EPEX Spot - Fetch data"
    description: "EPEX Spot: Fetch data from all services or a specific service."
    variables:
      state: "{{ states('binary_sensor.epex_spot_data_update') }}"
      next_poll_time: "{{ state_attr('binary_sensor.epex_spot_data_update', 'next_poll_time') }}"
    triggers:
      - trigger: time_pattern
        minutes: /3
    conditions:
      - condition: template
        value_template: "{{ now() >= next_poll_time|as_datetime|as_local and state == 'off' }}"
    actions:
      - delay:
          seconds: "{{ range(7, 67)|random|int }}"
      - data: {}
        action: epex_spot.fetch_data
    mode: single
#
# ########## End: Automation ##########
#
# ########## Start: Persistent Template Sensors ##########
#
template:
  - trigger:
      - platform: time_pattern
        minutes: "/1"
    action:
      - variables:
          var: >-
            {% from '032-hems.jinja' import globalVariables %}
            {{ globalVariables()|from_json }}
          data_update: "{{ states(var.epexspot_data_update) }}"
          last_update: "{{ state_attr(var.epexspot_data_update, 'last_update') }}"
          next_poll_time: "{{ state_attr(var.epexspot_data_update, 'next_poll_time') }}"
          data: "{{ state_attr(var.epexspot_net_price, 'data') }}"
          APIUpdate: >-
            {% from '032-epexspot.jinja' import APIUpdate %}
            {{ APIUpdate(data_update, last_update, next_poll_time, data)|from_json }}
    binary_sensor:
      - name: "epex_spot_data_update"
        unique_id: epex_spot_data_update
        icon: mdi:clock
        state: >-
          {{ APIUpdate.tomorrow_data_available }}
        attributes:
          last_data: "{{ APIUpdate.last_data }}"
          last_api_update: "{{ APIUpdate.last_update }}"
          next_poll_time: "{{ APIUpdate.next_poll_time }}"
          last_updated: "{{ now().isoformat() }}"

  - trigger:
      - platform: state
        entity_id:
          - sensor.epex_spot_data_price_1
          - sensor.epex_spot_data_price_2
          - sensor.epex_spot_data_price_3
    action:
      - variables:
          var: >-
            {% from '032-hems.jinja' import globalVariables %}
            {{ globalVariables()|from_json }}
          sensor_list: "{{ [var.epexspot_price_1, var.epexspot_price_2, var.epexspot_price_3] }}"
          sensor_active: >-
            {% from '032-epexspot.jinja' import redundantSensor %}
            {{ redundantSensor(sensor_list) }}
    sensor:
      - name: epex_spot_data_price
        unique_id: epex_spot_data_price
        #friendly_name: "EPEX Spot Data Price"
        #        state_class: "total"
        state_class: measurement
        unit_of_measurement: "EUR/MWh"
        icon: mdi:currency-eur
        state: "{{ states(sensor_active)|float(0) }}"
        attributes:
          data: "{{ state_attr(sensor_active, 'data') }}"
          price_ct_per_kwh: "{{ state_attr(sensor_active, 'price_ct_per_kwh') }}"
          sensor_active: "{{ sensor_active }}"
          last_updated: "{{ now().isoformat() }}"

  - trigger:
      - platform: state
        entity_id:
          - sensor.epex_spot_data_net_price_1
          - sensor.epex_spot_data_net_price_2
          - sensor.epex_spot_data_net_price_3
    action:
      - variables:
          var: >-
            {% from '032-hems.jinja' import globalVariables %}
            {{ globalVariables()|from_json }}
          sensor_list: "{{ [var.epexspot_net_price_1, var.epexspot_net_price_2, var.epexspot_net_price_3] }}"
          sensor_active: >-
            {% from '032-epexspot.jinja' import redundantSensor %}
            {{ redundantSensor(sensor_list) }}
    sensor:
      - name: epex_spot_data_net_price
        unique_id: epex_spot_data_net_price
        #friendly_name: "EPEX Spot Data Net Price"
        #        state_class: "total"
        state_class: measurement
        unit_of_measurement: "ct/kWh"
        icon: mdi:currency-eur
        state: "{{ states(sensor_active)|float(0) }}"
        attributes:
          data: "{{ state_attr(sensor_active, 'data') }}"
          sensor_active: "{{ sensor_active }}"
          last_updated: "{{ now().isoformat() }}"

  - trigger:
      - platform: state
        entity_id:
          - sensor.epex_spot_data_quantile_1
          - sensor.epex_spot_data_quantile_2
          - sensor.epex_spot_data_quantile_3
    action:
      - variables:
          var: >-
            {% from '032-hems.jinja' import globalVariables %}
            {{ globalVariables()|from_json }}
          sensor_list: "{{ [var.epexspot_quantile_1, var.epexspot_quantile_2, var.epexspot_quantile_3] }}"
          sensor_active: >-
            {% from '032-epexspot.jinja' import redundantSensor %}
            {{ redundantSensor(sensor_list) }}
    sensor:
      - name: epex_spot_data_quantile
        unique_id: epex_spot_data_quantile
        #friendly_name: "EPEX Spot Data Quantile"
        #        state_class: "total"
        state_class: measurement
        #        unit_of_measurement: "ct/kWh"
        #        icon: mdi:currency-eur
        state: "{{ states(sensor_active)|float(0) }}"
        attributes:
          data: "{{ state_attr(sensor_active, 'data') }}"
          sensor_active: "{{ sensor_active }}"
          last_updated: "{{ now().isoformat() }}"
#
# ########## End: Persistent Template Sensors ##########
