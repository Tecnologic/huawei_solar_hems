# ########## Huawei Solar Integration ##########
#
# huawei-solar-battery-card-package.yaml
#
# - sensor.batteries_discharge_power_average_last_24h
# - sensor.batteries_charge_power_average_last_30mins
#
# - sensor.batteries_state_of_capacity_energy
# - sensor.batteries_state_of_capacity_remaining_discharge_time
# - sensor.batteries_state_of_capacity_remaining_charge_energy
# - sensor.batteries_state_of_capacity_remaining_charge_time
#
# ########## Start: Statistics Sensors ##########
#
sensor:
  #
  # Average of Battery Discharge Power (W) in last 24h
  #
  - platform: statistics
    name: batteries_discharge_power_average_last_24h
    unique_id: batteries_discharge_power_average_last_24h
    entity_id: sensor.batteries_discharge_power
    state_characteristic: mean
    max_age:
      hours: 24
  #
  # Average of Battery Charge Power (W) in last 30mins
  #
  - platform: statistics
    name: batteries_charge_power_average_last_30mins
    unique_id: batteries_charge_power_average_last_30mins
    entity_id: sensor.batteries_charge_power
    state_characteristic: mean
    max_age:
      hours: 0.5
#
# ########## End: Statistics Sensors ##########
#
# ########## Start: Persistent Template Sensors ##########
#
template:
  - trigger:
      - platform: state
        entity_id:
          - sensor.batteries_state_of_capacity
        not_from:
          - "unknown"
          - "unavailable"
          - "none"
        not_to:
          - "unknown"
          - "unavailable"
          - "none"
    action:
      - variables:
          var: >-
            {% from '032-emhass.jinja' import globalVariables %}
            {{ globalVariables()|from_json }}
          bat_soc: "{{ states(var.bat_soc)|float(0) }}"
          bat_soc_energy: "{{ var.batteries_rated_capacity * bat_soc / 100 }}"
          bat_soc_energy_remaining: "{{ var.batteries_rated_charge_energy * (1 - bat_soc / 100) }}"
          bat_charge_power_average_last_30mins: "{{ states(var.bat_charge_power_average_last_30mins)|float(0) / 1000 }}"
          bat_discharge_power_average_last_24h: "{{ states(var.bat_discharge_power_average_last_24h)|float(0) / 1000 }}"
    sensor:
      #
      # Battery Remaining Energy for
      # - sensor.batteries_state_of_capacity_remaining_discharge_time
      #
      - name: batteries_state_of_capacity_energy
        unique_id: batteries_state_of_capacity_energy
        #friendly_name: "Battery Remaining Energy"
        state_class: "total"
        device_class: energy
        unit_of_measurement: "kWh"
        icon: mdi:solar-power
        state: "{{ bat_soc_energy }}"
      #
      # Estimation of remaining battery discharge time
      #
      - name: batteries_state_of_capacity_remaining_discharge_time
        unique_id: batteries_state_of_capacity_remaining_discharge_time
        state: >-
          {% if bat_discharge_power_average_last_24h > 0 %}
            {% set decimal_hours = bat_soc_energy / bat_discharge_power_average_last_24h %}
            {% set minutes = (decimal_hours % 1 * 60) | round(0) %}
            {{ decimal_hours | int(0) ~ 'h ' ~ minutes ~ 'min' }}
          {% else %}
            {{ bat_soc }}
          {% endif %}
      #
      # Estimation of remaining battery charge energy for
      # - sensor.batteries_state_of_capacity_remaining_charge_time
      #
      - name: batteries_state_of_capacity_remaining_charge_energy
        unique_id: batteries_state_of_capacity_remaining_charge_energy
        #friendly_name: "Battery Remaining Charge Energy"
        state_class: "total"
        device_class: energy
        unit_of_measurement: "kWh"
        icon: mdi:solar-power
        state: "{{ bat_soc_energy_remaining }}"
      #
      # Estimation of remaining battery charge time
      #
      - name: batteries_state_of_capacity_remaining_charge_time
        unique_id: batteries_state_of_capacity_remaining_charge_time
        state: >-
          {% if bat_soc < 100 and bat_charge_power_average_last_30mins > 0 %}
            {% set decimal_hours = bat_soc_energy_remaining / bat_charge_power_average_last_30mins %}
            {% set minutes = (decimal_hours % 1 * 60) | round(0) %}
            {{ decimal_hours | int(0) ~ 'h ' ~ minutes ~ 'min' }}
          {% else %}
            {{ bat_soc }} %
          {% endif %}
#
# ########## End: Persistent Template Sensors ##########
