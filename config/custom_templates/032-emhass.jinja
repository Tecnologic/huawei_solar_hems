{%- macro convertDate(node, target) %}
    {% set ns = namespace(items=[]) %}
    {% for info in node %}
        {% set dt = [(target, info[target].isoformat())] %}
        {% set remaining = info.items() | list | rejectattr('0','eq', target) | list %}
        {% set ns.items = ns.items + [ dict.from_keys(dt + remaining) ] %}
    {% endfor %}
    {{- ns.items|to_json -}}
{%- endmacro %}

{%- macro priceLevel(price_ct_per_kwh) %}
    {% if price_ct_per_kwh < 25.0 %}
        {%- set price_level = 'Very Low (Green)' %}
    {% elif price_ct_per_kwh < 30.0 %}
        {%- set price_level = 'Low (Green)' %}
    {% elif price_ct_per_kwh < 40.0 %}
        {%- set price_level = 'Neutral (Yellow)' %}
    {% elif price_ct_per_kwh < 45.0 %}
        {%- set price_level = 'High (Orange)' %}
    {% elif price_ct_per_kwh < 50.0 %}
        {%- set price_level = 'Very High (Red)' %}
    {% else %}
        {%- set price_level = 'Spike (Purple)' %}
    {% endif %}
    {{- price_level|to_json -}}
{%- endmacro %}

{%- macro priceStatistics(node, date, value, ts_start_time) %}
    {%- set var = namespace(data = []) %}
    {% if node %}
        {%- for record in node if record[date]|as_timestamp >= ts_start_time %}
            {%- set var.data = var.data + [record[value]] %}
        {%- endfor %}
        {%- set min_price = var.data|min|float(0) / 100 %}
        {%- set max_price = var.data|max|float(0) / 100 %}
        {%- set sum = var.data|sum|float(0) / 100 %}
        {%- set len = var.data|list|length|float(0) %}
        {{- {
                'min_price': min_price,
                'max_price': max_price,
                'avg_price': (sum / len)|float(0),
                'price_range': (max_price - min_price)|float(0)
            }|to_json -}}
    {% else %}
        {{- {
                'min_price': 'n/a',
                'max_price': 'n/a',
                'avg_price': 'n/a',
                'price_range': 'n/a'
            }|to_json -}}
    {% endif %}
{%- endmacro %}

{%- macro forecastEPEXSpot(net_price) %}
    {# Check if EPEX Spot data for tomorrow is already available #}
    {# - if not available, add data from today as an quick and dirty forecast for tomorrow #}
    {# - will be overwritten after 13:00 CET with real EPEX Spot data #}

    {%- set var = namespace(result = net_price) %}
    {%- set last_start_time = net_price|map(attribute='start_time')|list|last %}
    {%- set array_length = net_price|map(attribute='start_time')|list|length %}

    {% if (last_start_time|as_datetime).day < (now() + timedelta( days = 1)).day %}
        {% for i in range((array_length - 24),array_length) %}
            {%- set var.result = var.result +
                [{
                    'start_time': ((net_price[i].start_time)|as_timestamp + 86400)|timestamp_local,
                    'end_time': ((net_price[i].end_time)|as_timestamp + 86400)|timestamp_local,
                    'price_ct_per_kwh': net_price[i].price_ct_per_kwh
                }] %}
        {% endfor %}
    {% endif %}
    {{- var.result|to_json -}}
{%- endmacro %}

{%- macro forecastArray(result, solcast, start_time, end_time, price_ct_per_kwh) %}
    {%- set var = namespace(p_pv = 'N/A') %}

    {%- for record in solcast if record.period_start|as_timestamp == start_time|as_timestamp %}
        {%- set var.p_pv = (record.pv_estimate * 1000)|round(0) %}
    {%- endfor %}

    {%- set result = result +
        [{
        'start_time': start_time|as_timestamp|timestamp_local,
        'end_time': end_time|as_timestamp|timestamp_local,
        'p_pv_forecast': var.p_pv,
        'epexspot_price_eur_per_kwh': (price_ct_per_kwh/100)|round(5)
        }] %}
    {{- result|to_json -}}
{%- endmacro %}

{%- macro forecastPeriod(node, date, value, factor, ts_end_time) %}
    {%- set var = namespace(total = 0) %}
    {%- set t = now() %}
    {%- set ts_now = ((t.timestamp()/1800)|round(0,'floor')|int * 1800) %}

    {%- if t.minute < 30 %}
        {%- set remaining = 30 - t.minute %}
    {% else %}
        {%- set remaining = 60 - t.minute %}
    {%- endif %}

    {% if node %}
        {%- for record in node %}
            {%- set ts = as_timestamp(record[date]) %}
            {%- set value = record[value]|float(0) %}
            {%- if ts == ts_now and ts < ts_end_time %}
                {%- set var.total = var.total + (value * 0.5 / factor / 30 * remaining) %}
            {%- elif ts > ts_now and ts < ts_end_time %}
                {%- set var.total = var.total + (value * 0.5 / factor) %}
            {%- endif %}
        {%- endfor %}
    {% endif %}
    {{- var.total|float(0)|round(3) -}}
{%- endmacro %}

{%- macro globalVariables() %}
    {# 1 x Huawei SUN2000-6KTL-M1 (High Current Version) #}
    {# 1 x Huawei LUNA2000-10-S0 #}
    {# 1 x Huawei LUNA2000-5-S0 #}
    {{- {
            'inverter_rated_power': 6000.0,
            'inverter_maximum_active_power': 6600.0,
            'batteries_rated_capacity': 15.0,
            'batteries_rated_charge_energy': 17.250,
            'batteries_rated_discharge_power': 6600.0,
            'batteries_rated_charge_power': 7500.0,
            'batteries_soc_setpoint_low': 5.0,
            'batteries_soc_setpoint_neutral': 60.0,
            'batteries_soc_setpoint_high': 75.0,
            'epexspot_quantile_setpoint_low': 0.15,
            'epexspot_quantile_setpoint_neutral': 0.33,
            'epexspot_quantile_setpoint_high': 0.96,

            'pv_1_current': 'sensor.inverter_pv_1_current',
            'pv_1_voltage': 'sensor.inverter_pv_1_voltage',
            'pv_2_current': 'sensor.inverter_pv_2_current',
            'pv_2_voltage': 'sensor.inverter_pv_2_voltage',

            'inv_input_power': 'sensor.inverter_input_power',
            'inv_active_power': 'sensor.inverter_active_power',
            'grid_active_power': 'sensor.power_meter_active_power',
            'house_power': 'sensor.house_consumption_power',

            'bat_power': 'sensor.batteries_charge_discharge_power',
            'bat_charge_power_average_last_30mins': 'sensor.batteries_charge_power_average_last_30mins',
            'bat_discharge_power_average_last_24h': 'sensor.batteries_discharge_power_average_last_24h',
            
            'bat_soc': 'sensor.batteries_state_of_capacity',

            'pv_yield_total': 'sensor.inverter_total_dc_input_energy',
            'inv_out_total': 'sensor.inverter_total_yield',
            'bat_in_total': 'sensor.batteries_total_charge',
            'bat_out_total': 'sensor.batteries_total_discharge',
            'grid_out_total': 'sensor.power_meter_exported',
            'grid_in_total': 'sensor.power_meter_consumption',

            'pv_yield': 'sensor.pv_yield_daily',
            'solar_yield': 'sensor.solar_yield_daily',

            'inv_in_solar': 'sensor.solar_yield_daily',
            'inv_in_grid': 'sensor.batteries_charge_from_grid_energy_daily',
            'inv_out': 'sensor.inverter_daily_yield',
            'inv_loss': 'sensor.inverter_loss_daily',
            'bat_in': 'sensor.batteries_day_charge',
            'bat_in_with_loss': 'sensor.batteries_day_charge_with_loss',
            'bat_in_loss': 'sensor.batteries_charge_loss_daily',
            'bat_out': 'sensor.batteries_day_discharge',
            'bat_out_with_loss': 'sensor.batteries_day_discharge_with_loss',
            'bat_out_loss': 'sensor.batteries_discharge_loss_daily',
            'grid_out': 'sensor.power_meter_exported_energy_daily',
            'grid_in': 'sensor.power_meter_consumption_energy_daily',

            'grid_power_forecast': 'sensor.p_grid_forecast',
            'load_power_forecast': 'sensor.p_load_forecast',
            'inv_active_power_forecast': 'sensor.p_hybrid_inverter',
            'prediction_status': 'sensor.optim_status',

            'load_energy_forecast': 'sensor.load_forecast_remaining_today_every_minute',
            'solar_energy_forecast': 'sensor.solcast_forecast_remaining_today_every_minute',
            'bat_charge_energy_remaining': 'sensor.batteries_state_of_capacity_remaining_charge_energy',

            'inv_out_weekly': 'sensor.inverter_yield_weekly',
            'inv_out_monthly': 'sensor.inverter_yield_monthly',
            'inv_out_yearly': 'sensor.inverter_yield_yearly',

            'grid_out_weekly': 'sensor.power_meter_exported_energy_weekly',
            'grid_out_monthly': 'sensor.power_meter_exported_energy_monthly',
            'grid_out_yearly': 'sensor.power_meter_exported_energy_yearly',

            'self_sufficiency_total': 'sensor.house_self_sufficiency_total',
            'self_sufficiency_daily': 'sensor.house_self_sufficiency_daily',

            'sun_rising_time': 'sensor.hems_sun_rising',
            'sun_setting_time': 'sensor.hems_sun_setting',
            'solar_noon_time': 'sensor.hems_sun_solar_noon',
            'prediction_end_time': 'sensor.hems_sun_prediction_end',
            'pv_excess_start_time': 'sensor.hems_sun_pv_excess_start',
            'pv_excess_end_time': 'sensor.hems_sun_pv_excess_end',

            'epexspot_price': 'sensor.epex_spot_data_price',
            'epexspot_price_1': 'sensor.epex_spot_data_price_3',
            'epexspot_price_2': 'sensor.epex_spot_data_price_1',
            'epexspot_price_3': 'sensor.epex_spot_data_price_2',

            'epexspot_net_price': 'sensor.epex_spot_data_net_price',
            'epexspot_net_price_1': 'sensor.epex_spot_data_net_price_3',
            'epexspot_net_price_2': 'sensor.epex_spot_data_net_price_1',
            'epexspot_net_price_3': 'sensor.epex_spot_data_net_price_2',

            'epexspot_quantile': 'sensor.epex_spot_data_quantile',
            'epexspot_quantile_1': 'sensor.epex_spot_data_quantile_3',
            'epexspot_quantile_2': 'sensor.epex_spot_data_quantile_1',
            'epexspot_quantile_3': 'sensor.epex_spot_data_quantile_2',

            'epexspot_data_update': 'binary_sensor.epex_spot_data_update',

            'solcast_forecast_today': 'sensor.solcast_pv_forecast_prognose_heute',
            'solcast_forecast_tomorrow': 'sensor.solcast_pv_forecast_prognose_fur_morgen',

            'solcast_last_poll_time': 'sensor.solcast_pv_forecast_zuletzt_abgefragte_api',
            'solcast_api_request_limit': 'sensor.solcast_pv_forecast_api_limit',
            'solcast_api_request_used': 'sensor.solcast_pv_forecast_verwendete_api',

            'sg_ready_hp_lock': 'switch.406_wp_sg_ready_evu',
            'sg_ready_pv_excess': 'switch.406_wp_sg_ready_pv_ma'
        }|to_json -}}
{%- endmacro %}
