{%- macro convertDate(node, target) %}
    {% set ns = namespace(items=[]) %}
    {% for info in node %}
        {% set dt = [(target, info[target].isoformat())] %}
        {% set remaining = info.items() | list | rejectattr('0','eq', target) | list %}
        {% set ns.items = ns.items + [ dict.from_keys(dt + remaining) ] %}
    {% endfor %}
    {{- ns.items|to_json -}}
{%- endmacro %}

{%- macro priceStatistics(node, date, value, ts_start_time) %}
    {%- set var = namespace(data = []) %}
    {% if node %}
        {%- for record in node if record[date]|as_timestamp >= ts_start_time %}
            {%- set var.data = var.data + [record[value]] %}
        {%- endfor %}
        {%- set min_price = var.data|min|float(0) / 100 %}
        {%- set max_price = var.data|max|float(0) / 100 %}
        {%- set sum = var.data|sum|float(0) / 100 %}
        {%- set len = var.data|list|length|float(0) %}
        {{- {
                'min_price': min_price,
                'max_price': max_price,
                'avg_price': (sum / len)|float(0),
                'price_range': (max_price - min_price)|float(0)
            }|to_json -}}
    {% else %}
        {{- {
                'min_price': 'n/a',
                'max_price': 'n/a',
                'avg_price': 'n/a',
                'price_range': 'n/a'
            }|to_json -}}
    {% endif %}
{%- endmacro %}

{%- macro forecastEPEXSpot(net_price) %}
    {# Check if EPEX Spot data for tomorrow is already available #}
    {# - if not available, add data from today as an quick and dirty forecast for tomorrow #}
    {# - will be overwritten after 13:00 CET with real EPEX Spot data #}

    {%- set var = namespace(result = net_price) %}
    {%- set last_start_time = net_price|map(attribute='start_time')|list|last %}
    {%- set array_length = net_price|map(attribute='start_time')|list|length %}

    {% if (last_start_time|as_datetime) < (today_at("00:00:00") + timedelta(days = 1)) %}
        {% for i in range((array_length - 24),array_length) %}
            {%- set var.result = var.result +
                [{
                    'start_time': ((net_price[i].start_time)|as_timestamp + 86400)|timestamp_local,
                    'end_time': ((net_price[i].end_time)|as_timestamp + 86400)|timestamp_local,
                    'price_ct_per_kwh': net_price[i].price_ct_per_kwh
                }] %}
        {% endfor %}
    {% endif %}
    {{- var.result|to_json -}}
{%- endmacro %}

{%- macro forecastArray(result, solcast, start_time, end_time, price_ct_per_kwh) %}
    {%- set var = namespace(p_pv = 'N/A') %}

    {%- for record in solcast if record.period_start|as_timestamp == start_time|as_timestamp %}
        {%- set var.p_pv = (record.pv_estimate * 1000)|round(0) %}
    {%- endfor %}

    {%- set result = result +
        [{
        'start_time': start_time|as_timestamp|timestamp_local,
        'end_time': end_time|as_timestamp|timestamp_local,
        'p_pv_forecast': var.p_pv,
        'epexspot_price_eur_per_kwh': (price_ct_per_kwh/100)|round(5)
        }] %}
    {{- result|to_json -}}
{%- endmacro %}

{%- macro forecastPeriod(node, date, value, factor, ts_end_time) %}
    {%- set var = namespace(total = 0) %}
    {%- set t = now() %}
    {%- set ts_now = ((t.timestamp()/1800)|round(0,'floor')|int * 1800) %}

    {%- if t.minute < 30 %}
        {%- set remaining = 30 - t.minute %}
    {% else %}
        {%- set remaining = 60 - t.minute %}
    {%- endif %}

    {% if node %}
        {%- for record in node %}
            {%- set ts = as_timestamp(record[date]) %}
            {%- set value = record[value]|float(0) %}
            {%- if ts == ts_now and ts < ts_end_time %}
                {%- set var.total = var.total + (value * 0.5 / factor / 30 * remaining) %}
            {%- elif ts > ts_now and ts < ts_end_time %}
                {%- set var.total = var.total + (value * 0.5 / factor) %}
            {%- endif %}
        {%- endfor %}
    {% endif %}
    {{- var.total|float(0)|round(3) -}}
{%- endmacro %}